from math import log


class TfidfTransformer:

    @staticmethod
    def tf_transform(corpus_matrix: list[list[int]]) -> list[list[float]]:
        '''Возвращает нормированную терм-документную матрицу'''

        return [[round(el/sum(vec), 3) for el in vec] for vec in corpus_matrix]

    @staticmethod
    def idf_transform(matrix: list[list[int]]) -> list[float]:
        '''Возвращает список частоты появления слов в текстах'''

        result = []
        numerator = len(matrix) + 1

        for i in range(len(matrix[0])):
            cnt_docs = 0
            for vec in matrix:
                if vec[i] != 0:
                    cnt_docs += 1

            denominator = cnt_docs + 1
            result.append(log(numerator/denominator) + 1)

        return result

    def fit_transform(self, corpus_matrix: list[list[int]]) -> list[list[float]]:
        '''Вычисляет TF-IDF матрицу'''

        tf = self.idf_transform(corpus_matrix)
        idf = self.idf_transform(corpus_matrix)

        return [[round(tf_vector[i] * idf[i], 3) for i in range(len(tf_vector))]
                for tf_vector in tf]
